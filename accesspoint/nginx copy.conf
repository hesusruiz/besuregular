events { }

http {
	# Limit the number of requests per second to 10 requests/second
	limit_req_zone $binary_remote_addr zone=one:10m rate=10r/s;

	# For limiting number of client connections from the same IP
	# Define a key/value area named "clientips" with a size of 10Mb
	limit_conn_zone $binary_remote_addr zone=clientips:10m;

	client_body_buffer_size 128k;
	client_max_body_size 128k;

	server {
		listen 80 default_server;
		listen [::]:80 default_server;
	#	listen 443 ssl default_server;
	#	listen [::]:443 ssl default_server;

		# For serving the static content from the nginx web server)
		root /usr/share/nginx/html;
		index index.html index.htm;

		server_name _;
		#ssl_certificate /etc/ssl/nginx/alastria-test.crt;
		#ssl_certificate_key /etc/ssl/nginx/alastria-test.key;
		client_body_timeout 10s;
		client_header_timeout 10s;

		location / {
			# First attempt to serve request as file, then as directory, then fall back to displaying a 404.
			try_files $uri $uri/ =404;
		}

		# This location is used for JSON_RPC calls to the Quorum node
		location /rpc {

			# Limit request rate to 10/s with a burst of 30
			limit_req zone=one burst=30 nodelay;

			# Limit to max 10 connections coming from the same IP
			limit_conn clientips 10;

			# Whitelist/Blacklist
	#		include ./conf.d/whitelist;
	#		deny all;

			# Filter JSON-RPC requests 
			proxy_pass http://alaquorum:22000;
#			content_by_lua_block {
#				ngx.req.read_body()
#				local data = ngx.req.get_body_data()
#				if data then
	#				if not (string.match(data,"eth_") or string.match(data,"net_") or string.match(data,"web3_")) then
	#					ngx.exit(403)
	#				else
#						ngx.exec("@rpc_proxy")
	#				end
#				end
#			}
		}

		# Forward request to the JSON-RPC interface of the Quorum node in the same machine
#		location @rpc_proxy {
#			proxy_pass alaquorum:22000;
#		}
	}
}